{"version":3,"sources":["components/BucketForm.js","components/Bucket.js","components/BucketList.js","App.js","index.js"],"names":["BucketForm","props","useState","input","setInput","eagerness","setEagerness","eagernessLevel","handleSubmit","e","preventDefault","onSubmit","id","Math","random","floor","text","handleChange","target","value","edit","className","type","placeholder","name","onChange","onClick","Bucket","setEdit","console","log","bucket","editBucketItem","map","item","i","isComplete","completeBucketItem","removeBucketItem","BucketList","setBucket","newBucket","updatedBucket","filter","itemId","newValue","prev","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ccb66c3.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction BucketForm(props) {\n  const [input, setInput] = useState('');\n  let [eagerness, setEagerness] = useState('');\n\n  const eagernessLevel = ['high', 'medium', 'low']\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!eagerness) {\n      eagerness = 'low';\n    }\n\n    props.onSubmit({\n      id: Math.random(Math.floor() * 1000),\n      text: input,\n      eagerness: eagerness,\n    });\n\n    setInput('');\n    setEagerness('');\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  // First we check to see if \"edit\" prop exists. If not, we render the normal form\n  // If the prop \"edit\" exists, we know to render the update form instead\n  return !props.edit \n  ? (\n    <div>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Add to your bucket list\"\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || 'Priority'}\n          </button>\n          <div className=\"dropdown-content\">\n            <p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\n            <p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\n            <p onClick={() => setEagerness(eagernessLevel[2])}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Add bucket list item</button>\n      </form>\n    </div>\n  ) : (\n    <div>\n      <h3>Update entry: {props.edit.value}</h3>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder={props.edit.value}\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || 'Priority'}\n          </button>\n          <div className=\"dropdown-content\">\n            <p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\n            <p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\n            <p onClick={() => setEagerness(eagernessLevel[2])}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Update</button>\n      </form>\n    </div>\n  );\n}\n\nexport default BucketForm;\n","import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\n\nfunction Bucket(props) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: '',\n    eagerness: '',\n  });\n\n  console.log(props.bucket);\n\n  const submitUpdate = (value) => {\n    props.editBucketItem(edit.id, value);\n    setEdit({ id: null, value: '', eagerness: '' });\n  };\n\n  if (edit.id) {\n    return <BucketForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return props.bucket.map((item, i) => (\n    <div\n      className={\n        item.isComplete\n          ? `bucket-row complete ${item.eagerness}`\n          : `bucket-row ${item.eagerness}`\n      }\n      key={i}\n    >\n      <div key={item.id} onClick={() => props.completeBucketItem(item.id)}>\n        {item.text}\n      </div>\n      <div className=\"icons\">\n        {console.log(item)}\n        <p onClick={() => setEdit({ id: item.id, value: item.text, eagerness: item.eagerness })}> ‚úèÔ∏è</p>\n        <p onClick={() => props.removeBucketItem(item.id)}> üóëÔ∏è</p>\n      </div>\n    </div>\n  ));\n}\n\nexport default Bucket;\n","import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n    console.log(\n      'üöÄ ~ file: BucketList.js ~ line 10 ~ addBucketItem ~ item',\n      item\n    );\n    // Check to see if the item text is empty\n    if (!item.text) {\n      return;\n    }\n\n    // Add the new bucket list item to the existing array of objects\n    const newBucket = [item, ...bucket];\n    console.log(newBucket);\n\n    // Call setBucket to update state with our new set of bucket list items\n    setBucket(newBucket);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n      if (item.id === id) {\n        item.isComplete = !item.isComplete;\n      }\n      return item;\n    });\n\n    console.log(updatedBucket);\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    const updatedBucket = [...bucket].filter((item) => item.id !== id);\n\n    setBucket(updatedBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the if of the item that was clicked and if so we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n","import './App.css';\nimport BucketList from './components/BucketList';\n\nfunction App() {\n  return (\n    <div className=\"bucket-app\">\n      <BucketList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}